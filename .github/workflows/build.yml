---
name: Build container image
on:
  pull_request:
    branches:
      - main
    paths:
      - 'Containerfile'
      - 'build_files/**'
      - '!docs/**'
      - '!specs/**'
  schedule:
    - cron: '05 10 * * *'  # 10:05am UTC everyday
  push:
    branches:
      - main
    paths:
      - 'Containerfile'
      - 'build_files/**'
      - '!docs/**'
      - '!specs/**'
  workflow_dispatch:
    inputs:
      fresh-rechunk:
        description: 'Enable fresh rechunking mode (omit prev-ref for clean optimization)'
        required: false
        default: false
        type: boolean

env:
  IMAGE_DESC: "DKUB's custom Bazzite-DX container image"  # Put your own description here for a fancy profile on https://artifacthub.io/!
  IMAGE_KEYWORDS: "bootc,ublue,universal-blue,bazzite,bazzite-dx,dkub"  # Put your own keywords here for a fancy profile on https://artifacthub.io/!
  IMAGE_LOGO_URL: "https://avatars.githubusercontent.com/u/3019596?s=200&u=b735c686ccde6a46aaea73c71a253a4ad0f86131&v=4"  # Put your own image here for a fancy profile on https://artifacthub.io/!
  IMAGE_NAME: "${{ github.event.repository.name }}"  # output image name, usually same as repo name
  IMAGE_REGISTRY: "ghcr.io/${{ github.repository_owner }}"  # do not edit
  DEFAULT_TAG: "latest"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build_push:
    name: Build and push image
    runs-on: ubuntu-24.04

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Prepare environment
        run: |
          # Lowercase the image uri
          echo "IMAGE_REGISTRY=${IMAGE_REGISTRY,,}" >> ${GITHUB_ENV}
          echo "IMAGE_NAME=${IMAGE_NAME,,}" >> ${GITHUB_ENV}

      # These stage versions are pinned by https://github.com/renovatebot/renovate
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      # Maximize build space by removing unwanted software
      # Reclaims ~30GB of disk space on GitHub-hosted runners
      - name: Maximize build space
        uses: ublue-os/remove-unwanted-software@cc0becac701cf642c8f0a6613bbdaf5dc36b259e # v9
        with:
          remove-codeql: true

      - name: Mount BTRFS for podman storage
        uses: ublue-os/container-storage-action@main

      - name: Get current date
        id: date
        run: |
          # This generates a timestamp like what is defined on the ArtifactHub documentation
          # E.G: 2022-02-08T15:38:15Z'
          # https://artifacthub.io/docs/topics/repositories/container-images/
          # https://linux.die.net/man/1/date
          echo "date=$(date -u +%Y\-%m\-%d\T%H\:%M\:%S\Z)" >> $GITHUB_OUTPUT

      # Image metadata for https://artifacthub.io/ - This is optional but is highly recommended so we all can get a index of all the custom images
      # The metadata by itself is not going to do anything, you choose if you want your image to be on ArtifactHub or not.
      - name: Image Metadata
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5
        id: metadata
        with:
          # This generates all the tags for your image, you can add custom tags here too!
          # Default tags are "$DEFAULT_TAG" and "$DEFAULT_TAG.$date".
          tags: |
            type=raw,value=${{ env.DEFAULT_TAG }}
            type=raw,value=${{ env.DEFAULT_TAG }}.{{date 'YYYYMMDD'}}
            type=raw,value={{date 'YYYYMMDD'}}
            type=raw,value=40-{{date 'YYYYMMDD'}}
            type=sha,enable=${{ github.event_name == 'pull_request' }}
            type=ref,event=pr
          labels: |
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}/refs/heads/main/README.md
            org.opencontainers.image.created=${{ steps.date.outputs.date }}
            org.opencontainers.image.description=${{ env.IMAGE_DESC }}
            org.opencontainers.image.documentation=https://raw.githubusercontent.com/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}/refs/heads/main/README.md
            org.opencontainers.image.source=https://github.com/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}/blob/main/Containerfile
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.url=https://github.com/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.version=${{ env.DEFAULT_TAG }}.{{date 'YYYYMMDD'}}
            io.artifacthub.package.deprecated=false
            io.artifacthub.package.keywords=${{ env.IMAGE_KEYWORDS }}
            io.artifacthub.package.license=Apache-2.0
            io.artifacthub.package.logo-url=${{ env.IMAGE_LOGO_URL }}
            io.artifacthub.package.prerelease=false
            containers.bootc=1
          sep-tags: " "
          sep-annotations: " "

      # Build image rootfully so rechunker can access it
      # Rechunker uses 'sudo podman' which requires image in root storage
      - name: Build Image
        id: build_image
        run: |
          # Build image as root so rechunker (which uses sudo podman) can access it
          sudo buildah build \
            --format docker \
            --tag "localhost/raw-img:${{ env.DEFAULT_TAG }}" \
            --file Containerfile \
            .
          
          echo "✅ Successfully built image localhost/raw-img:${{ env.DEFAULT_TAG }}"
        env:
          DEFAULT_TAG: ${{ env.DEFAULT_TAG }}

      # Rechunking implementation for 5-10x smaller update downloads
      # Documentation: https://github.com/hhd-dev/rechunk
      
      # Step 1: Mount BTRFS storage required for rechunking
      - name: Mount BTRFS Storage for Rechunking
        run: |
          echo "Creating 50GB BTRFS filesystem for rechunking..."
          sudo mkdir -p /var/tmp/rechunk-btrfs
          sudo truncate -s 50G /var/tmp/rechunk.img
          sudo mkfs.btrfs /var/tmp/rechunk.img
          sudo mount -o loop /var/tmp/rechunk.img /var/tmp/rechunk-btrfs
          sudo chmod 777 /var/tmp/rechunk-btrfs
          echo "BTRFS mounted at /var/tmp/rechunk-btrfs"
          df -h /var/tmp/rechunk-btrfs

      # Step 2: Generate version tag for this build (40-YYYYMMDD format)
      - name: Generate Version Tag
        id: generate-version
        run: |
          TAG="40-$(date +%Y%m%d)"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Generated version tag: $TAG"

      # Step 3: Query GHCR for previous rechunked image to use as baseline
      - name: Generate Previous Reference
        id: generate-prev-ref
        run: |
          # Skip prev-ref if fresh-rechunk mode enabled
          if [[ "${{ github.event.inputs.fresh-rechunk }}" == "true" ]]; then
            echo "Fresh rechunking mode enabled - skipping prev-ref"
            echo "ref=" >> $GITHUB_OUTPUT
            echo "tag=" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Query GHCR for latest tag matching Fedora 40 date pattern (40-YYYYMMDD)
          echo "Querying GHCR for latest rechunked image..."
          LATEST_TAG=$(skopeo list-tags docker://ghcr.io/dkolb/bazzite-dkub 2>/dev/null | \
            jq -r '.Tags | map(select(test("^40-[0-9]{8}$"))) | sort | last // ""')
          
          # Validate tag exists and is not current build's tag (prevent circular reference)
          CURRENT_TAG="${{ steps.generate-version.outputs.tag }}"
          if [[ -n "$LATEST_TAG" ]] && [[ "$LATEST_TAG" != "$CURRENT_TAG" ]]; then
            echo "Using prev-ref: ghcr.io/dkolb/bazzite-dkub:$LATEST_TAG"
            echo "ref=ghcr.io/dkolb/bazzite-dkub:$LATEST_TAG" >> $GITHUB_OUTPUT
            echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          else
            echo "No valid prev-ref found - using fresh rechunking"
            if [[ "$LATEST_TAG" == "$CURRENT_TAG" ]]; then
              echo "Reason: Latest tag matches current build tag (same-day rebuild)"
            else
              echo "Reason: No previous rechunked images found (first build)"
            fi
            echo "ref=" >> $GITHUB_OUTPUT
            echo "tag=" >> $GITHUB_OUTPUT
          fi

      # Step 4: Run rechunker to optimize OCI layers
      - name: Run Rechunker
        id: rechunk
        uses: hhd-dev/rechunk@5fbe1d3a639615d2548d83bc888360de6267b1a2 # v1.2.4
        with:
          rechunk: ghcr.io/hhd-dev/rechunk:v1.2.4
          ref: localhost/raw-img
          prev-ref: ${{ steps.generate-prev-ref.outputs.ref }}
          version: ${{ steps.generate-version.outputs.tag }}
          labels: ${{ steps.metadata.outputs.labels }}
        timeout-minutes: 10

      # Step 5: Load rechunked image and tag with final version
      - name: Load rechunked image in podman and tag
        run: |
          echo "Loading rechunked image from OCI directory..."
          # Use the version tag output from rechunker (may have .1, .2 suffix for duplicates)
          RECHUNKED_VERSION="${{ steps.rechunk.outputs.version }}"
          echo "Rechunked version: $RECHUNKED_VERSION"
          
          # Load rechunked image and capture the loaded image ID
          IMAGE_OUTPUT=$(podman pull ${{ steps.rechunk.outputs.ref }})
          IMAGE_ID=$(echo "$IMAGE_OUTPUT" | tail -n 1)
          echo "Loaded image ID: $IMAGE_ID"
          
          # Tag with all versions from metadata step
          for tag in ${{ steps.metadata.outputs.tags }}; do
            echo "Tagging as: ${{ env.IMAGE_NAME }}:$tag"
            podman tag $IMAGE_ID ${{ env.IMAGE_NAME }}:$tag
          done
          
          # Clean up rechunk output directory
          sudo rm -rf ${{ steps.rechunk.outputs.output }}
          
          echo "✅ Rechunked image tagged and ready for push"

      # These `if` statements are so that pull requests for your custom images do not make it publish any packages under your name without you knowing
      # They also check if the runner is on the default branch so that things like the merge queue (if you enable it), are going to work
      - name: Login to GitHub Container Registry
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3
        if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push To GHCR
        uses: redhat-actions/push-to-registry@5ed88d269cf581ea9ef6dd6806d01562096bee9c # v2
        if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        id: push
        env:
          REGISTRY_USER: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ github.token }}
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          image: ${{ env.IMAGE_NAME }}
          tags: ${{ steps.metadata.outputs.tags }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}

      # This section is optional and only needs to be enabled if you plan on distributing
      # your project for others to consume. You will need to create a public and private key
      # using Cosign and save the private key as a repository secret in Github for this workflow
      # to consume. For more details, review the image signing section of the README.
      - name: Install Cosign
        uses: sigstore/cosign-installer@d7543c93d881b35a8faa02e8e3605f69b7a1ce62 # v3.10.0
        if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)

      - name: Sign container image
        if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        run: |
          IMAGE_FULL="${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}"
          for tag in ${{ steps.metadata.outputs.tags }}; do
            cosign sign -y --key env://COSIGN_PRIVATE_KEY $IMAGE_FULL:$tag
          done
        env:
          TAGS: ${{ steps.push.outputs.digest }}
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}
